'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function fromInsideIframe() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$targetOrigin = _ref.targetOrigin,
      targetOrigin = _ref$targetOrigin === void 0 ? '*' : _ref$targetOrigin;

  if (typeof self === 'undefined' || self.parent == null) {
    throw new Error("This does not appear to be a child iframe, because there is no parent window.");
  }

  var _self = self,
      parent = _self.parent; // We need to store the listener, because we wrap it to do some origin checking. Ideally,
  // we’d instead store an `AbortController`, and use its signal to cancel the listeners,
  // but that isn’t widely supported.

  var listenerMap = new WeakMap();
  return {
    postMessage: function postMessage(message, transfer) {
      parent.postMessage(message, targetOrigin, transfer);
    },
    addEventListener: function addEventListener(event, listener) {
      var wrappedListener = function wrappedListener(event) {
        if (event.source !== parent) return;
        listener(event);
      };

      listenerMap.set(listener, wrappedListener);
      self.addEventListener(event, wrappedListener);
    },
    removeEventListener: function removeEventListener(event, listener) {
      var wrappedListener = listenerMap.get(listener);
      if (wrappedListener == null) return;
      listenerMap.delete(listener);
      self.removeEventListener(event, wrappedListener);
    }
  };
}

exports.fromInsideIframe = fromInsideIframe;
