"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromIframe = void 0;
function fromIframe(target, { terminate: shouldTerminate = true, targetOrigin = '*' } = {}) {
    var _a;
    if (typeof window === 'undefined') {
        throw new Error(`You can only run fromIframe() in a browser context, but no window was found.`);
    }
    // We need to store the listener, because we wrap it to do some origin checking. Ideally,
    // weâ€™d instead store an `AbortController`, and use its signal to cancel the listeners,
    // but that isnâ€™t widely supported.
    const listenerMap = new WeakMap();
    const iframeLoadPromise = ((_a = target.contentDocument) === null || _a === void 0 ? void 0 : _a.readyState) === 'complete'
        ? Promise.resolve()
        : new Promise((resolve) => {
            target.addEventListener('load', () => resolve(), {
                once: true,
            });
        });
    return {
        async postMessage(message, transfer) {
            var _a;
            if (((_a = target.contentDocument) === null || _a === void 0 ? void 0 : _a.readyState) !== 'complete') {
                await iframeLoadPromise;
            }
            target.contentWindow.postMessage(message, targetOrigin, transfer);
        },
        addEventListener(event, listener) {
            const wrappedListener = (event) => {
                if (event.source !== target.contentWindow)
                    return;
                listener(event);
            };
            listenerMap.set(listener, wrappedListener);
            self.addEventListener(event, wrappedListener);
        },
        removeEventListener(event, listener) {
            const wrappedListener = listenerMap.get(listener);
            if (wrappedListener == null)
                return;
            listenerMap.delete(listener);
            self.removeEventListener(event, wrappedListener);
        },
        terminate() {
            if (shouldTerminate)
                target.remove();
        },
    };
}
exports.fromIframe = fromIframe;
