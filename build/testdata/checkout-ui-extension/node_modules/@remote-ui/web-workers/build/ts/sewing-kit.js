"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.webWorkers = void 0;
const plugins_1 = require("@sewing-kit/plugins");
const babel_plugin_1 = require("./babel-plugin");
const PLUGIN = 'Quilt.WebWorkers';
const addWorkerHooks = plugins_1.addHooks(() => ({
    remoteUiWorkerNoop: new plugins_1.WaterfallHook(),
    remoteUiWorkerWebpackPlugins: new plugins_1.WaterfallHook(),
    remoteUiWorkerWebpackGlobalObject: new plugins_1.WaterfallHook(),
    remoteUiWorkerApplyBabelToPackages: new plugins_1.WaterfallHook(),
}));
function webWorkers(options = {}) {
    return plugins_1.createProjectPlugin(PLUGIN, ({ tasks: { dev, build }, project }) => {
        dev.hook(({ hooks }) => {
            hooks.configureHooks.hook(addWorkerHooks);
            hooks.configure.hook((configure) => {
                var _a, _b;
                (_a = configure.babelConfig) === null || _a === void 0 ? void 0 : _a.hook(createBabelConfigUpdater(plugins_1.TargetRuntime.fromProject(project), configure, options));
                (_b = configure.webpackPlugins) === null || _b === void 0 ? void 0 : _b.hook(createWebpackPluginAdder(configure, options));
            });
        });
        build.hook(({ hooks }) => {
            hooks.configureHooks.hook(addWorkerHooks);
            hooks.target.hook(({ target, hooks }) => {
                hooks.configure.hook((configure) => {
                    var _a, _b;
                    (_a = configure.babelConfig) === null || _a === void 0 ? void 0 : _a.hook(createBabelConfigUpdater(target.runtime, configure, options));
                    (_b = configure.webpackPlugins) === null || _b === void 0 ? void 0 : _b.hook(createWebpackPluginAdder(configure, options));
                });
            });
        });
    });
}
exports.webWorkers = webWorkers;
function createBabelConfigUpdater(runtime, configure, { noop: defaultNoop = !runtime.includes(plugins_1.Runtime.Browser), applyBabelToPackages = {}, }) {
    return async (babelConfig) => {
        var _a;
        const [noop, packages] = await Promise.all([
            configure.remoteUiWorkerNoop.run(defaultNoop),
            configure.remoteUiWorkerApplyBabelToPackages.run(Object.assign(Object.assign({}, babel_plugin_1.DEFAULT_PACKAGES_TO_PROCESS), applyBabelToPackages)),
        ]);
        return Object.assign(Object.assign({}, babelConfig), { plugins: [
                ...((_a = babelConfig.plugins) !== null && _a !== void 0 ? _a : []),
                [
                    require.resolve('./babel-plugin'),
                    { noop, packages },
                ],
            ] });
    };
}
function createWebpackPluginAdder(configure, { webpackPlugins = [], webpackGlobalObject = 'self' }) {
    return async (plugins) => {
        const [{ WebWorkerPlugin }, globalObject, workerPlugins] = await Promise.all([
            Promise.resolve().then(() => __importStar(require('./webpack-parts'))),
            configure.remoteUiWorkerWebpackGlobalObject.run(webpackGlobalObject),
            configure.remoteUiWorkerWebpackPlugins.run(webpackPlugins),
        ]);
        return [
            ...plugins,
            new WebWorkerPlugin({ globalObject, plugins: workerPlugins }),
        ];
    };
}
