import { addHooks, WaterfallHook, createProjectPlugin, TargetRuntime, Runtime } from '@sewing-kit/plugins';
import { DEFAULT_PACKAGES_TO_PROCESS } from './babel-plugin.esnext';

const PLUGIN = 'Quilt.WebWorkers';
const addWorkerHooks = addHooks(() => ({
  remoteUiWorkerNoop: new WaterfallHook(),
  remoteUiWorkerWebpackPlugins: new WaterfallHook(),
  remoteUiWorkerWebpackGlobalObject: new WaterfallHook(),
  remoteUiWorkerApplyBabelToPackages: new WaterfallHook()
}));
function webWorkers(options = {}) {
  return createProjectPlugin(PLUGIN, ({
    tasks: {
      dev,
      build
    },
    project
  }) => {
    dev.hook(({
      hooks
    }) => {
      hooks.configureHooks.hook(addWorkerHooks);
      hooks.configure.hook(configure => {
        var _configure$babelConfi, _configure$webpackPlu;

        (_configure$babelConfi = configure.babelConfig) === null || _configure$babelConfi === void 0 ? void 0 : _configure$babelConfi.hook(createBabelConfigUpdater(TargetRuntime.fromProject(project), configure, options));
        (_configure$webpackPlu = configure.webpackPlugins) === null || _configure$webpackPlu === void 0 ? void 0 : _configure$webpackPlu.hook(createWebpackPluginAdder(configure, options));
      });
    });
    build.hook(({
      hooks
    }) => {
      hooks.configureHooks.hook(addWorkerHooks);
      hooks.target.hook(({
        target,
        hooks
      }) => {
        hooks.configure.hook(configure => {
          var _configure$babelConfi2, _configure$webpackPlu2;

          (_configure$babelConfi2 = configure.babelConfig) === null || _configure$babelConfi2 === void 0 ? void 0 : _configure$babelConfi2.hook(createBabelConfigUpdater(target.runtime, configure, options));
          (_configure$webpackPlu2 = configure.webpackPlugins) === null || _configure$webpackPlu2 === void 0 ? void 0 : _configure$webpackPlu2.hook(createWebpackPluginAdder(configure, options));
        });
      });
    });
  });
}

function createBabelConfigUpdater(runtime, configure, {
  noop: defaultNoop = !runtime.includes(Runtime.Browser),
  applyBabelToPackages = {}
}) {
  return async babelConfig => {
    var _babelConfig$plugins;

    const [noop, packages] = await Promise.all([configure.remoteUiWorkerNoop.run(defaultNoop), configure.remoteUiWorkerApplyBabelToPackages.run({ ...DEFAULT_PACKAGES_TO_PROCESS,
      ...applyBabelToPackages
    })]);
    return { ...babelConfig,
      plugins: [...((_babelConfig$plugins = babelConfig.plugins) !== null && _babelConfig$plugins !== void 0 ? _babelConfig$plugins : []), [require.resolve('./babel-plugin'), {
        noop,
        packages
      }]]
    };
  };
}

function createWebpackPluginAdder(configure, {
  webpackPlugins = [],
  webpackGlobalObject = 'self'
}) {
  return async plugins => {
    const [{
      WebWorkerPlugin
    }, globalObject, workerPlugins] = await Promise.all([import('./webpack-parts/index.esnext'), configure.remoteUiWorkerWebpackGlobalObject.run(webpackGlobalObject), configure.remoteUiWorkerWebpackPlugins.run(webpackPlugins)]);
    return [...plugins, new WebWorkerPlugin({
      globalObject,
      plugins: workerPlugins
    })];
  };
}

export { webWorkers };
