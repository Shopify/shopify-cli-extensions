"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.render = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const reconciler_1 = __importDefault(require("./reconciler"));
const context_1 = require("./context");
function render(element, root, callback) {
    // @see https://github.com/facebook/react/blob/993ca533b42756811731f6b7791ae06a35ee6b4d/packages/react-reconciler/src/ReactRootTags.js
    // I think we are a legacy root?
    const container = reconciler_1.default.createContainer(root, 0, false, null);
    const renderContextValue = { root, reconciler: reconciler_1.default };
    // callback is cast here because the typings do not mark that argument
    // as optional, even though it is.
    reconciler_1.default.updateContainer(jsx_runtime_1.jsx(context_1.RenderContext.Provider, Object.assign({ value: renderContextValue }, { children: element }), void 0), container, null, callback);
    // Did not work for me because (I think?) it is done by the worker
    // and therefore has an entirely different React.
    //
    // Original code was from:
    // @see https://github.com/facebook/react/issues/16666
    // @see https://github.com/michalochman/react-pixi-fiber/pull/148
    //
    // reconciler.injectIntoDevTools({
    //   bundleType: 1,
    //   findFiberByHostInstance: reconciler.findFiberByHostInstance,
    //   rendererPackageName: '@remote-ui/react',
    //   version: '16.9.0',
    // });
}
exports.render = render;
