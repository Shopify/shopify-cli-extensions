"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoteComponent = exports.renderComponent = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const core_1 = require("@remote-ui/core");
const hooks_1 = require("./hooks");
const emptyObject = {};
function renderComponent({ component, controller, receiver, key, }) {
    return (jsx_runtime_1.jsx(exports.RemoteComponent, { receiver: receiver, component: component, controller: controller }, key));
}
exports.renderComponent = renderComponent;
exports.RemoteComponent = react_1.memo(({ receiver, component, controller }) => {
    const Implementation = controller.get(component.type);
    const attached = hooks_1.useAttached(receiver, component);
    const props = react_1.useMemo(() => {
        const props = attached === null || attached === void 0 ? void 0 : attached.props;
        if (!props)
            return emptyObject;
        const newProps = {};
        for (const key of Object.keys(props)) {
            const prop = props[key];
            newProps[key] = core_1.isRemoteReceiverAttachableFragment(prop) ? (jsx_runtime_1.jsx(RemoteFragment, { receiver: receiver, fragment: prop, controller: controller }, void 0)) : (prop);
        }
        return newProps;
    }, [receiver, controller, attached === null || attached === void 0 ? void 0 : attached.props, component.version]);
    if (attached == null)
        return null;
    const { children } = attached;
    return (jsx_runtime_1.jsx(Implementation, Object.assign({}, props, { children: renderChildren(children, receiver, controller) }), void 0));
});
const RemoteFragment = react_1.memo(({ receiver, fragment, controller }) => {
    var _a;
    const { children } = (_a = hooks_1.useAttached(receiver, fragment)) !== null && _a !== void 0 ? _a : {};
    if (!children)
        return null;
    return jsx_runtime_1.jsx(jsx_runtime_1.Fragment, { children: renderChildren(children, receiver, controller) }, void 0);
});
function renderChildren(children, receiver, controller) {
    const { renderComponent, renderText } = controller.renderer;
    return [...children].map((child) => {
        switch (child.kind) {
            case core_1.KIND_COMPONENT:
                return renderComponent({
                    component: child,
                    receiver,
                    controller,
                    key: child.id,
                });
            case core_1.KIND_TEXT:
                return renderText({
                    text: child,
                    receiver,
                    key: child.id,
                });
            default:
                return null;
        }
    });
}
