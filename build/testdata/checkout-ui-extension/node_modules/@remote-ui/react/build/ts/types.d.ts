import type { ReactNode, ComponentType, ReactElement } from 'react';
import type { RemoteComponentType, RemoteFragment } from '@remote-ui/core';
declare type PropsForRemoteComponent<T> = T extends RemoteComponentType<string, infer Props, any> ? {
    [K in keyof Props]: RemoteFragmentToReactElement<Props[K]>;
} : never;
declare type RemoteFragmentToReactElement<T> = T extends RemoteFragment<infer R> ? ReactElement | false | RemoteFragment<R> : T;
export declare type ReactPropsFromRemoteComponentType<Type extends RemoteComponentType<string, any, any>> = PropsForRemoteComponent<Type> & {
    children?: ReactNode;
};
export declare type ReactComponentTypeFromRemoteComponentType<Type extends RemoteComponentType<string, any, any>> = ComponentType<ReactPropsFromRemoteComponentType<Type>>;
export {};
//# sourceMappingURL=types.d.ts.map