"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_dom_1 = require("react-dom");
const test_utils_1 = require("react-dom/test-utils");
const core_1 = require("@remote-ui/core");
const host_1 = require("../host");
const __1 = require("..");
const RemoteHelloWorld = __1.createRemoteReactComponent('HelloWorld', { fragmentProps: ['name'] });
const RemoteWithPerson = __1.createRemoteReactComponent('WithPerson');
const PersonContext = react_1.createContext({ name: 'Mollie' });
function HostHelloWorld({ name, }) {
    return jsx_runtime_1.jsxs("div", { children: ["Hello, ", name] }, void 0);
}
function HostWithPerson({ run, }) {
    const person = react_1.useContext(PersonContext);
    react_1.useEffect(() => {
        run(person);
    }, [run]);
    return null;
}
describe('@remote-ui/react', () => {
    let appElement;
    beforeEach(() => {
        appElement = document.createElement('div');
        document.body.appendChild(appElement);
        jest.useFakeTimers();
    });
    afterEach(() => {
        appElement.remove();
        jest.useRealTimers();
    });
    it('renders a simple component across a remote bridge', () => {
        const name = 'Winston';
        const receiver = core_1.createRemoteReceiver();
        const remoteRoot = core_1.createRemoteRoot(receiver.receive, {
            components: [RemoteHelloWorld.displayName],
        });
        function RemoteApp() {
            return jsx_runtime_1.jsx(RemoteHelloWorld, { name: name }, void 0);
        }
        const controller = host_1.createController({ HelloWorld: HostHelloWorld });
        function HostApp() {
            return jsx_runtime_1.jsx(host_1.RemoteRenderer, { controller: controller, receiver: receiver }, void 0);
        }
        test_utils_1.act(() => {
            react_dom_1.render(jsx_runtime_1.jsx(HostApp, {}, void 0), appElement);
            __1.render(jsx_runtime_1.jsx(RemoteApp, {}, void 0), remoteRoot, () => {
                remoteRoot.mount();
            });
            jest.runAllTimers();
        });
        expect(appElement.innerHTML).toBe(`<div>Hello, ${name}</div>`);
    });
    it('renders component with fragment as prop across a remote bridge', () => {
        const name = 'Winston';
        const receiver = core_1.createRemoteReceiver();
        const remoteRoot = core_1.createRemoteRoot(receiver.receive, {
            components: [RemoteHelloWorld.displayName],
        });
        const NameContext = react_1.createContext('');
        function ActualApp() {
            const name = react_1.useContext(NameContext);
            return jsx_runtime_1.jsx(RemoteHelloWorld, { name: jsx_runtime_1.jsx(RemoteHelloWorld, { name: name }, void 0) }, void 0);
        }
        function RemoteApp() {
            return (jsx_runtime_1.jsx(NameContext.Provider, Object.assign({ value: name }, { children: jsx_runtime_1.jsx(ActualApp, {}, void 0) }), void 0));
        }
        const controller = host_1.createController({ HelloWorld: HostHelloWorld });
        function HostApp() {
            return jsx_runtime_1.jsx(host_1.RemoteRenderer, { controller: controller, receiver: receiver }, void 0);
        }
        test_utils_1.act(() => {
            react_dom_1.render(jsx_runtime_1.jsx(HostApp, {}, void 0), appElement);
            __1.render(jsx_runtime_1.jsx(RemoteApp, {}, void 0), remoteRoot, () => {
                remoteRoot.mount();
            });
            jest.runAllTimers();
        });
        expect(appElement.innerHTML).toBe(`<div>Hello, <div>Hello, ${name}</div></div>`);
    });
    it('handles function props on remote components', () => {
        const person = { name: 'Luna' };
        const spy = jest.fn();
        const receiver = core_1.createRemoteReceiver();
        const remoteRoot = core_1.createRemoteRoot(receiver.receive, {
            components: [RemoteWithPerson],
        });
        function RemoteApp() {
            return jsx_runtime_1.jsx(RemoteWithPerson, { run: spy }, void 0);
        }
        const controller = host_1.createController({
            WithPerson: HostWithPerson,
        });
        function HostApp() {
            return jsx_runtime_1.jsx(host_1.RemoteRenderer, { controller: controller, receiver: receiver }, void 0);
        }
        test_utils_1.act(() => {
            react_dom_1.render(jsx_runtime_1.jsx(PersonContext.Provider, Object.assign({ value: person }, { children: jsx_runtime_1.jsx(HostApp, {}, void 0) }), void 0), appElement);
            __1.render(jsx_runtime_1.jsx(RemoteApp, {}, void 0), remoteRoot, () => {
                remoteRoot.mount();
            });
            jest.runAllTimers();
        });
        expect(spy).toHaveBeenCalledWith(person);
    });
});
