'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.js');
var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var core = require('@remote-ui/core');
var hooks = require('./hooks.js');

var emptyObject = {};
function renderComponent(_ref) {
  var component = _ref.component,
      controller = _ref.controller,
      receiver = _ref.receiver,
      key = _ref.key;
  return /*#__PURE__*/jsxRuntime.jsx(RemoteComponent, {
    receiver: receiver,
    component: component,
    controller: controller
  }, key);
}
var RemoteComponent = /*#__PURE__*/react.memo(function (_ref2) {
  var receiver = _ref2.receiver,
      component = _ref2.component,
      controller = _ref2.controller;
  var Implementation = controller.get(component.type);
  var attached = hooks.useAttached(receiver, component);
  var props = react.useMemo(function () {
    var props = attached === null || attached === void 0 ? void 0 : attached.props;
    if (!props) return emptyObject;
    var newProps = {};

    for (var _i = 0, _Object$keys = Object.keys(props); _i < _Object$keys.length; _i++) {
      var key = _Object$keys[_i];
      var prop = props[key];
      newProps[key] = core.isRemoteReceiverAttachableFragment(prop) ? /*#__PURE__*/jsxRuntime.jsx(RemoteFragment, {
        receiver: receiver,
        fragment: prop,
        controller: controller
      }) : prop;
    }

    return newProps;
  }, [receiver, controller, attached === null || attached === void 0 ? void 0 : attached.props, component.version]);
  if (attached == null) return null;
  var children = attached.children;
  return /*#__PURE__*/jsxRuntime.jsx(Implementation, _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, props), {}, {
    children: renderChildren(children, receiver, controller)
  }));
});
var RemoteFragment = /*#__PURE__*/react.memo(function (_ref3) {
  var _useAttached;

  var receiver = _ref3.receiver,
      fragment = _ref3.fragment,
      controller = _ref3.controller;

  var _ref4 = (_useAttached = hooks.useAttached(receiver, fragment)) !== null && _useAttached !== void 0 ? _useAttached : {},
      children = _ref4.children;

  if (!children) return null;
  return /*#__PURE__*/jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: renderChildren(children, receiver, controller)
  });
});

function renderChildren(children, receiver, controller) {
  var _controller$renderer = controller.renderer,
      renderComponent = _controller$renderer.renderComponent,
      renderText = _controller$renderer.renderText;
  return _rollupPluginBabelHelpers.toConsumableArray(children).map(function (child) {
    switch (child.kind) {
      case core.KIND_COMPONENT:
        return renderComponent({
          component: child,
          receiver: receiver,
          controller: controller,
          key: child.id
        });

      case core.KIND_TEXT:
        return renderText({
          text: child,
          receiver: receiver,
          key: child.id
        });

      default:
        return null;
    }
  });
}

exports.RemoteComponent = RemoteComponent;
exports.renderComponent = renderComponent;
