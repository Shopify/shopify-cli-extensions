import { objectSpread2 as _objectSpread2, toConsumableArray as _toConsumableArray } from '../_virtual/_rollupPluginBabelHelpers.js';
import { jsx, Fragment } from 'react/jsx-runtime';
import { memo, useMemo } from 'react';
import { isRemoteReceiverAttachableFragment, KIND_TEXT, KIND_COMPONENT } from '@remote-ui/core';
import { useAttached } from './hooks.mjs';

var emptyObject = {};
function renderComponent(_ref) {
  var component = _ref.component,
      controller = _ref.controller,
      receiver = _ref.receiver,
      key = _ref.key;
  return /*#__PURE__*/jsx(RemoteComponent, {
    receiver: receiver,
    component: component,
    controller: controller
  }, key);
}
var RemoteComponent = /*#__PURE__*/memo(function (_ref2) {
  var receiver = _ref2.receiver,
      component = _ref2.component,
      controller = _ref2.controller;
  var Implementation = controller.get(component.type);
  var attached = useAttached(receiver, component);
  var props = useMemo(function () {
    var props = attached === null || attached === void 0 ? void 0 : attached.props;
    if (!props) return emptyObject;
    var newProps = {};

    for (var _i = 0, _Object$keys = Object.keys(props); _i < _Object$keys.length; _i++) {
      var key = _Object$keys[_i];
      var prop = props[key];
      newProps[key] = isRemoteReceiverAttachableFragment(prop) ? /*#__PURE__*/jsx(RemoteFragment, {
        receiver: receiver,
        fragment: prop,
        controller: controller
      }) : prop;
    }

    return newProps;
  }, [receiver, controller, attached === null || attached === void 0 ? void 0 : attached.props, component.version]);
  if (attached == null) return null;
  var children = attached.children;
  return /*#__PURE__*/jsx(Implementation, _objectSpread2(_objectSpread2({}, props), {}, {
    children: renderChildren(children, receiver, controller)
  }));
});
var RemoteFragment = /*#__PURE__*/memo(function (_ref3) {
  var _useAttached;

  var receiver = _ref3.receiver,
      fragment = _ref3.fragment,
      controller = _ref3.controller;

  var _ref4 = (_useAttached = useAttached(receiver, fragment)) !== null && _useAttached !== void 0 ? _useAttached : {},
      children = _ref4.children;

  if (!children) return null;
  return /*#__PURE__*/jsx(Fragment, {
    children: renderChildren(children, receiver, controller)
  });
});

function renderChildren(children, receiver, controller) {
  var _controller$renderer = controller.renderer,
      renderComponent = _controller$renderer.renderComponent,
      renderText = _controller$renderer.renderText;
  return _toConsumableArray(children).map(function (child) {
    switch (child.kind) {
      case KIND_COMPONENT:
        return renderComponent({
          component: child,
          receiver: receiver,
          controller: controller,
          key: child.id
        });

      case KIND_TEXT:
        return renderText({
          text: child,
          receiver: receiver,
          key: child.id
        });

      default:
        return null;
    }
  });
}

export { RemoteComponent, renderComponent };
