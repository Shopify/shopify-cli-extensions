import { objectWithoutProperties as _objectWithoutProperties, toConsumableArray as _toConsumableArray, objectSpread2 as _objectSpread2 } from './_virtual/_rollupPluginBabelHelpers.js';
import { jsx } from 'react/jsx-runtime';
import { memo, useRef, useMemo, isValidElement } from 'react';
import { isRemoteFragment } from '@remote-ui/core';
import { useRender } from './hooks/render.mjs';

function createRemoteReactComponent(componentType) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      fragmentProps = _ref.fragmentProps;

  if (!fragmentProps || !fragmentProps.length) {
    return componentType;
  }

  var wrapper = createComponentWrapper(componentType, fragmentProps);
  wrapper.displayName = componentType;
  return wrapper;
}

function createComponentWrapper(componentType, fragmentProps) {
  var Component = componentType;
  return /*#__PURE__*/memo(function ComponentWrapper(_ref2) {
    var _ref2$children = _ref2.children,
        externalChildren = _ref2$children === void 0 ? [] : _ref2$children,
        externalProps = _objectWithoutProperties(_ref2, ["children"]);

    var fragments = useRef({});

    var _useRender = useRender(),
        root = _useRender.root,
        reconciler = _useRender.reconciler;

    var _useMemo = useMemo(function () {
      // React portals need to be attached to the tree after intialize in order to render.
      // It's usually done by appending them as children of a parent node.
      // @see https://reactjs.org/docs/portals.html
      var portals = [];
      var props = {};

      for (var _i = 0, _Object$keys = Object.keys(externalProps); _i < _Object$keys.length; _i++) {
        var key = _Object$keys[_i];
        var element = externalProps[key];

        if (fragmentProps.includes(key) && /*#__PURE__*/isValidElement(element)) {
          var currentFragment = fragments.current[key];
          var fragment = isRemoteFragment(currentFragment) ? currentFragment : root.createFragment();
          fragments.current[key] = fragment; // Assign createText and createComponent to fragment
          // so that it can become a React container to render the portal

          // Assign createText and createComponent to fragment
          // so that it can become a React container to render the portal
          Object.assign(fragment, {
            createText: function createText() {
              return root.createText.apply(root, arguments);
            },
            createComponent: function createComponent(type) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }

              return root.createComponent.apply(root, [type].concat(args));
            }
          });
          var portal = reconciler.createPortal(element, fragment, null, null);
          portals.push(portal);
          props[key] = fragment;
        } else {
          props[key] = element;
          delete fragments.current[key];
        }
      }

      return {
        props: props,
        children: [].concat(_toConsumableArray(externalChildren), portals)
      };
    }, [externalChildren, externalProps, root, reconciler, fragments]),
        props = _useMemo.props,
        children = _useMemo.children;

    return /*#__PURE__*/jsx(Component, _objectSpread2(_objectSpread2({}, props), {}, {
      children: children
    }));
  });
}

export { createRemoteReactComponent };
