.Wrapper {
  --checkbox-border-color: var(--p-border);
  --checkbox-border-color-disabled: var(--p-border-disabled);
  --checkbox-border-radius: var(
    --x-checkbox-border-radius,
    var(--x-control-border-radius, var(--p-border-radius-base))
  );
  --checkbox-fill: var(--p-interactive);
  --checkbox-icon-fill: var(--p-icon-on-interactive);
  --checkbox-size: var(--p-choice-size);

  display: grid;
  justify-content: start;
  align-items: start;

  /*
	  We’d naturally use `gap: var(--x-spacing-tight1x)`, but Autoprefixer
	  has an issue where it won’t transform both the grid and custom property
	  syntax. This leaves custom properties in the fallback grid declaration,
	  which causes it to be ignored. Once this issue is fixed:
	  https://github.com/csstools/postcss-preset-env/issues/180
	  we will be able to use the gap property as expected.
	*/
  grid-template: 'control gap label' auto / auto var(--p-spacing-tight) auto;
}

.Checkbox {
  position: relative;
  // rem(1px)
  margin-top: 1px;
  grid-area: control;
  width: var(--checkbox-size);
  height: var(--checkbox-size);
}

.Input {
  background-clip: padding-box;
  border: 1px transparent solid;
  border-radius: var(--checkbox-border-radius);
  box-sizing: content-box;
  cursor: pointer;
  display: block;
  width: 100%;
  height: 100%;
  box-shadow: 0 0 0 1px var(--checkbox-border-color) inset;
  transition: box-shadow var(--p-duration-fast) var(--p-ease),
    border var(--p-duration-fast) var(--p-ease);

  &::before {
    content: '';
    display: block;
    border-radius: calc(var(--checkbox-border-radius) / 2);
    width: 100%;
    height: 100%;
    pointer-events: none;
    box-shadow: 0 0 0 0 var(--checkbox-fill) inset, 0 0 0 0 var(--checkbox-fill);
    opacity: 0.3;
    transition: box-shadow var(--p-duration-fast) var(--x-timing-ease-out);
  }

  &:focus,
  &:active {
    // rem(1px)
    box-shadow: 0 0 0 1px var(--checkbox-fill) inset;
    outline: none;

    &::before {
      // rem(1px)
      box-shadow: 0 0 0 1px var(--checkbox-fill) inset,
        // rem(3px)
        0 0 0 3px var(--checkbox-fill);
    }

    /* stylelint-disable-next-line selector-max-specificity */
    &:not(:focus-visible)::before {
      box-shadow: none;
    }
  }

  &:focus-visible::before {
    // rem(1px)
    box-shadow: 0 0 0 1px var(--checkbox-fill) inset,
      // rem(3px)
      0 0 0 3px var(--checkbox-fill);
  }

  &:checked {
    // em(10px)
    box-shadow: 0 0 0 10px var(--checkbox-fill) inset;

    & + .Icon {
      opacity: 1;
    }
  }
}

.Input-isDisabled {
  cursor: default;

  &:checked {
    // em(10px)
    box-shadow: 0 0 0 10px var(--p-border-disabled) inset;
  }

  &::before {
    display: none;
  }
}

.Label {
  display: block;
  max-width: 100%;
  cursor: pointer;
  grid-area: label;
  margin-top: 0.25em;
}

.Label-isDisabled {
  cursor: default;
}

.Icon {
  color: var(--checkbox-icon-fill);

  svg {
    fill: var(--checkbox-icon-fill);
  }

  pointer-events: none;
  opacity: 0;
  transform-origin: center;
  transform: translate(-50%, -50%);
  position: absolute;
  top: calc(60% + 1px);
  left: calc(50% + 1px);
  transition: all var(--p-duration-fast) ease-in-out 100ms;
}
